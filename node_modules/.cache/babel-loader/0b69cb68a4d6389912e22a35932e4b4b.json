{"ast":null,"code":"export const ensureIsNotInput = event => {\n  return event.target.tagName.toLowerCase() !== 'input';\n};\nexport const fireHotKey = (e, callback) => {\n  if (ensureIsNotInput(e)) {\n    e.preventDefault();\n    callback();\n  }\n};\nexport const padArray = (array, value, newLength) => {\n  const length = array.length;\n  const filler = Array(newLength - length).fill(value);\n  return array.concat(filler);\n};\nexport const convertToCharCodeArray = string => {\n  return string.split('').map(ch => ch.charCodeAt(0));\n};\nexport const convertToString = charCodeArray => {\n  return charCodeArray.map(code => String.fromCharCode(Math.floor(code))).join('');\n};\nexport const convertToStringAndFilterType = (charCodeArray, type) => {\n  return convertToString(charCodeArray.filter(code => typeof code === type));\n};","map":{"version":3,"sources":["/Users/marcelo/Documents/passwordgen.live/password-generator/src/helpers.js"],"names":["ensureIsNotInput","event","target","tagName","toLowerCase","fireHotKey","e","callback","preventDefault","padArray","array","value","newLength","length","filler","Array","fill","concat","convertToCharCodeArray","string","split","map","ch","charCodeAt","convertToString","charCodeArray","code","String","fromCharCode","Math","floor","join","convertToStringAndFilterType","type","filter"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAGC,KAAK,IAAI;AACvC,SAAOA,KAAK,CAACC,MAAN,CAAaC,OAAb,CAAqBC,WAArB,OAAuC,OAA9C;AACD,CAFM;AAIP,OAAO,MAAMC,UAAU,GAAG,CAACC,CAAD,EAAIC,QAAJ,KAAiB;AACzC,MAAIP,gBAAgB,CAACM,CAAD,CAApB,EAAyB;AACvBA,IAAAA,CAAC,CAACE,cAAF;AACAD,IAAAA,QAAQ;AACT;AACF,CALM;AAOP,OAAO,MAAME,QAAQ,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAeC,SAAf,KAA6B;AACnD,QAAMC,MAAM,GAAGH,KAAK,CAACG,MAArB;AACA,QAAMC,MAAM,GAAGC,KAAK,CAACH,SAAS,GAAGC,MAAb,CAAL,CAA0BG,IAA1B,CAA+BL,KAA/B,CAAf;AACA,SAAOD,KAAK,CAACO,MAAN,CAAaH,MAAb,CAAP;AACD,CAJM;AAMP,OAAO,MAAMI,sBAAsB,GAAGC,MAAM,IAAI;AAC9C,SAAOA,MAAM,CAACC,KAAP,CAAa,EAAb,EAAiBC,GAAjB,CAAqBC,EAAE,IAAIA,EAAE,CAACC,UAAH,CAAc,CAAd,CAA3B,CAAP;AACD,CAFM;AAIP,OAAO,MAAMC,eAAe,GAAGC,aAAa,IAAI;AAC9C,SAAOA,aAAa,CAACJ,GAAd,CAAkBK,IAAI,IAAIC,MAAM,CAACC,YAAP,CAAoBC,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAApB,CAA1B,EAAiEK,IAAjE,CAAsE,EAAtE,CAAP;AACD,CAFM;AAIP,OAAO,MAAMC,4BAA4B,GAAG,CAACP,aAAD,EAAgBQ,IAAhB,KAAyB;AACnE,SAAOT,eAAe,CAACC,aAAa,CAACS,MAAd,CAAqBR,IAAI,IAAI,OAAOA,IAAP,KAAgBO,IAA7C,CAAD,CAAtB;AACD,CAFM","sourcesContent":["export const ensureIsNotInput = event => {\n  return event.target.tagName.toLowerCase() !== 'input';\n};\n\nexport const fireHotKey = (e, callback) => {\n  if (ensureIsNotInput(e)) {\n    e.preventDefault();\n    callback();\n  }\n};\n\nexport const padArray = (array, value, newLength) => {\n  const length = array.length;\n  const filler = Array(newLength - length).fill(value);\n  return array.concat(filler);\n};\n\nexport const convertToCharCodeArray = string => {\n  return string.split('').map(ch => ch.charCodeAt(0));\n};\n\nexport const convertToString = charCodeArray => {\n  return charCodeArray.map(code => String.fromCharCode(Math.floor(code))).join('');\n};\n\nexport const convertToStringAndFilterType = (charCodeArray, type) => {\n  return convertToString(charCodeArray.filter(code => typeof code === type));\n};\n"]},"metadata":{},"sourceType":"module"}