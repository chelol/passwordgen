{"ast":null,"code":"var _jsxFileName = \"/Users/marcelo/Documents/passwordgen.live/password-generator/src/components/PassphraseParams.js\";\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport InputRow from 'components/common/InputRow';\nimport RangeSlider from 'components/common/RangeSlider';\nimport RadioButton from 'components/common/RadioButton';\nimport config from 'config';\nimport { media } from 'styles/helpers';\nconst Slider = styled(RangeSlider)`\n  ${media.tablet`\n    width: 70%;\n  `}\n`;\nconst Styles = styled.div`\n  padding: 2rem;\n  .radios {\n    > div {\n      flex-basis: 50%;\n      margin-right: 0;\n    }\n  }\n  ${media.tablet`    \n  .radios {\n    > div {\n      flex-basis: auto;\n      margin-right: 3rem;\n    }\n  }\n  `}\n  ${p => p.isPwaMode && css`\n      padding: 1rem 2rem;\n      & div:first-child {\n        margin-top: 0;\n      }\n    `}\n`;\nexport default function PassphraseParams({\n  values,\n  onChange,\n  isPwaMode\n}) {\n  const {\n    modes\n  } = config;\n  const ppValues = values[modes.PP];\n  return React.createElement(Styles, {\n    isPwaMode: isPwaMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, !isPwaMode && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Long passphrases are easy to remember (and type!) and are often just as secure as a random string of characters, especially when they're longer than a password would be. Makes a great choice for your \\\"master\\\" password.\"), React.createElement(InputRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Slider, {\n    label: \"Word count\",\n    name: \"length\",\n    value: ppValues.length,\n    min: 3,\n    max: 8,\n    onChange: onChange,\n    title: \"Adjust word count\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })), \"Delimiter\", React.createElement(InputRow, {\n    className: \"radios\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(RadioButton, {\n    label: \"Hyphen\",\n    name: \"delimiter\",\n    value: \"hyphen\",\n    checked: ppValues.delimiter === 'hyphen',\n    onChange: onChange,\n    title: \"Separate words with hyphens\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(RadioButton, {\n    label: \"Space\",\n    name: \"delimiter\",\n    value: \"space\",\n    checked: ppValues.delimiter === 'space',\n    onChange: onChange,\n    title: \"Separate words with spaces\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(RadioButton, {\n    label: \"Period\",\n    name: \"delimiter\",\n    value: \"period\",\n    checked: ppValues.delimiter === 'period',\n    onChange: onChange,\n    title: \"Separate words with periods\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), React.createElement(RadioButton, {\n    label: \"123\",\n    name: \"delimiter\",\n    value: \"number\",\n    checked: ppValues.delimiter === 'number',\n    onChange: onChange,\n    title: \"Separate words with a number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/marcelo/Documents/passwordgen.live/password-generator/src/components/PassphraseParams.js"],"names":["React","styled","css","InputRow","RangeSlider","RadioButton","config","media","Slider","tablet","Styles","div","p","isPwaMode","PassphraseParams","values","onChange","modes","ppValues","PP","length","delimiter"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\nimport InputRow from 'components/common/InputRow';\nimport RangeSlider from 'components/common/RangeSlider';\nimport RadioButton from 'components/common/RadioButton';\nimport config from 'config';\nimport { media } from 'styles/helpers';\n\nconst Slider = styled(RangeSlider)`\n  ${media.tablet`\n    width: 70%;\n  `}\n`;\n\nconst Styles = styled.div`\n  padding: 2rem;\n  .radios {\n    > div {\n      flex-basis: 50%;\n      margin-right: 0;\n    }\n  }\n  ${media.tablet`    \n  .radios {\n    > div {\n      flex-basis: auto;\n      margin-right: 3rem;\n    }\n  }\n  `}\n  ${p =>\n    p.isPwaMode &&\n    css`\n      padding: 1rem 2rem;\n      & div:first-child {\n        margin-top: 0;\n      }\n    `}\n`;\n\nexport default function PassphraseParams({ values, onChange, isPwaMode }) {\n  const { modes } = config;\n  const ppValues = values[modes.PP];\n\n  return (\n    <Styles isPwaMode={isPwaMode}>\n      {!isPwaMode && (\n        <p>\n          Long passphrases are easy to remember (and type!) and are often just as secure\n          as a random string of characters, especially when they're longer than a password\n          would be. Makes a great choice for your \"master\" password.\n        </p>\n      )}\n      <InputRow>\n        <Slider\n          label=\"Word count\"\n          name=\"length\"\n          value={ppValues.length}\n          min={3}\n          max={8}\n          onChange={onChange}\n          title=\"Adjust word count\"\n        />\n      </InputRow>\n      Delimiter\n      <InputRow className=\"radios\">\n        <RadioButton\n          label=\"Hyphen\"\n          name=\"delimiter\"\n          value=\"hyphen\"\n          checked={ppValues.delimiter === 'hyphen'}\n          onChange={onChange}\n          title=\"Separate words with hyphens\"\n        />\n        <RadioButton\n          label=\"Space\"\n          name=\"delimiter\"\n          value=\"space\"\n          checked={ppValues.delimiter === 'space'}\n          onChange={onChange}\n          title=\"Separate words with spaces\"\n        />\n        <RadioButton\n          label=\"Period\"\n          name=\"delimiter\"\n          value=\"period\"\n          checked={ppValues.delimiter === 'period'}\n          onChange={onChange}\n          title=\"Separate words with periods\"\n        />\n        <RadioButton\n          label=\"123\"\n          name=\"delimiter\"\n          value=\"number\"\n          checked={ppValues.delimiter === 'number'}\n          onChange={onChange}\n          title=\"Separate words with a number\"\n        />\n      </InputRow>\n    </Styles>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}