{"ast":null,"code":"var _jsxFileName = \"/Users/marcelo/Documents/passwordgen.live/password-generator/src/App.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ReactGA from 'react-ga';\nimport styled from 'styled-components';\nimport copy from 'copy-to-clipboard';\nimport GlobalStyles from 'styles/global';\nimport Header from 'components/Header';\nimport ChoiceToggle from 'components/common/ChoiceToggle';\nimport Params from 'components/Params';\nimport Meter from 'components/Meter';\nimport Secrets from 'components/Secrets';\nimport ReGenButton from 'components/ReGenButton';\nimport Instructions from 'components/Instructions';\nimport Disclaimer from 'components/Disclaimer';\nimport About from 'components/About';\nimport Footer from 'components/Footer';\nimport useLocalStorageState from 'hooks/useLocalStorageState';\nimport useHotKeys from 'hooks/useHotKeys';\nimport config from 'config';\nimport { media } from 'styles/helpers';\nimport { fireHotKey } from 'helpers';\nimport { generatePassphrases, generatePasswords, getEntropy } from 'cryptoLogic';\nconst Styles = styled.div`\n  margin: 0 auto;\n  ${media.tablet`\n    max-width: 66rem;\n  `}\n  ${p => p.isPwaMode && 'padding-bottom: 3rem;'}\n`;\nReactGA.initialize(config.GAPropertyId);\n\nfunction App() {\n  const {\n    localStorageKeys,\n    modes,\n    initParams\n  } = config;\n  const [params, setParams] = useLocalStorageState(localStorageKeys.params, initParams);\n  const [mode, setMode] = useLocalStorageState(localStorageKeys.mode, modes.PW);\n  const [outputs, setOutputs] = useState({\n    [modes.PW]: [],\n    [modes.PP]: []\n  });\n  const entropy = getEntropy(params, mode);\n  const isPwaMode = window.location.pathname === '/pwa';\n\n  const handleInputChange = e => {\n    let {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    if (type === 'range' || type === 'number') value = parseInt(value);\n    if (type === 'checkbox') value = checked;\n\n    if (type === 'checkbox' && mode === modes.PW) {\n      const numChecked = ['upper', 'lower', 'numbers', 'symbols'].reduce((num, flag) => params[mode][flag] ? num + 1 : num, 0); // user should select at least one option\n\n      if (!value && numChecked === 1) return;\n    }\n\n    setParams(prev => ({ ...prev,\n      [mode]: { ...prev[mode],\n        [name]: value\n      }\n    }));\n  };\n\n  const generate = useCallback(() => {\n    const generateFunction = mode === modes.PW ? generatePasswords : generatePassphrases;\n    setOutputs(prev => {\n      return { ...prev,\n        [mode]: generateFunction(params.numSecrets, params[mode])\n      };\n    });\n  }, [mode, modes.PW, params]);\n  useEffect(() => {\n    generate();\n  }, [generate]);\n  useHotKeys({\n    c: e => {\n      fireHotKey(e, () => {\n        copy(outputs[mode][0]);\n      });\n    },\n    r: e => {\n      fireHotKey(e, () => {\n        generate();\n      });\n    }\n  });\n  useEffect(() => {\n    ReactGA.pageview('/');\n  }, []);\n  return React.createElement(Styles, {\n    isPwaMode: isPwaMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(GlobalStyles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(Header, {\n    isPwaMode: isPwaMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(ChoiceToggle, {\n    choices: {\n      Password: modes.PW,\n      Passphrase: modes.PP\n    },\n    initial: mode === modes.PW ? 'Password' : 'Passphrase',\n    onToggle: m => setMode(m),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(Params, {\n    mode: mode,\n    values: params,\n    onChange: handleInputChange,\n    isPwaMode: isPwaMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(Meter, {\n    entropy: entropy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), React.createElement(Secrets, {\n    outputs: outputs[mode],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), React.createElement(ReGenButton, {\n    onClick: () => generate(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), !isPwaMode && React.createElement(React.Fragment, null, React.createElement(Instructions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), React.createElement(Disclaimer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), React.createElement(About, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/marcelo/Documents/passwordgen.live/password-generator/src/App.js"],"names":["React","useState","useEffect","useCallback","ReactGA","styled","copy","GlobalStyles","Header","ChoiceToggle","Params","Meter","Secrets","ReGenButton","Instructions","Disclaimer","About","Footer","useLocalStorageState","useHotKeys","config","media","fireHotKey","generatePassphrases","generatePasswords","getEntropy","Styles","div","tablet","p","isPwaMode","initialize","GAPropertyId","App","localStorageKeys","modes","initParams","params","setParams","mode","setMode","PW","outputs","setOutputs","PP","entropy","window","location","pathname","handleInputChange","e","name","value","type","checked","target","parseInt","numChecked","reduce","num","flag","prev","generate","generateFunction","numSecrets","c","r","pageview","Password","Passphrase","m"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport ReactGA from 'react-ga';\nimport styled from 'styled-components';\nimport copy from 'copy-to-clipboard';\nimport GlobalStyles from 'styles/global';\nimport Header from 'components/Header';\nimport ChoiceToggle from 'components/common/ChoiceToggle';\nimport Params from 'components/Params';\nimport Meter from 'components/Meter';\nimport Secrets from 'components/Secrets';\nimport ReGenButton from 'components/ReGenButton';\nimport Instructions from 'components/Instructions';\nimport Disclaimer from 'components/Disclaimer';\nimport About from 'components/About';\nimport Footer from 'components/Footer';\nimport useLocalStorageState from 'hooks/useLocalStorageState';\nimport useHotKeys from 'hooks/useHotKeys';\nimport config from 'config';\nimport { media } from 'styles/helpers';\nimport { fireHotKey } from 'helpers';\nimport { generatePassphrases, generatePasswords, getEntropy } from 'cryptoLogic';\n\nconst Styles = styled.div`\n  margin: 0 auto;\n  ${media.tablet`\n    max-width: 66rem;\n  `}\n  ${p => p.isPwaMode && 'padding-bottom: 3rem;'}\n`;\n\nReactGA.initialize(config.GAPropertyId);\n\nfunction App() {\n  const { localStorageKeys, modes, initParams } = config;\n  const [params, setParams] = useLocalStorageState(localStorageKeys.params, initParams);\n  const [mode, setMode] = useLocalStorageState(localStorageKeys.mode, modes.PW);\n  const [outputs, setOutputs] = useState({\n    [modes.PW]: [],\n    [modes.PP]: []\n  });\n  const entropy = getEntropy(params, mode);\n  const isPwaMode = window.location.pathname === '/pwa';\n\n  const handleInputChange = e => {\n    let { name, value, type, checked } = e.target;\n\n    if (type === 'range' || type === 'number') value = parseInt(value);\n    if (type === 'checkbox') value = checked;\n    if (type === 'checkbox' && mode === modes.PW) {\n      const numChecked = ['upper', 'lower', 'numbers', 'symbols'].reduce(\n        (num, flag) => (params[mode][flag] ? num + 1 : num),\n        0\n      );\n      // user should select at least one option\n      if (!value && numChecked === 1) return;\n    }\n    setParams(prev => ({\n      ...prev,\n      [mode]: {\n        ...prev[mode],\n        [name]: value\n      }\n    }));\n  };\n\n  const generate = useCallback(() => {\n    const generateFunction = mode === modes.PW ? generatePasswords : generatePassphrases;\n    setOutputs(prev => {\n      return {\n        ...prev,\n        [mode]: generateFunction(params.numSecrets, params[mode])\n      };\n    });\n  }, [mode, modes.PW, params]);\n\n  useEffect(() => {\n    generate();\n  }, [generate]);\n\n  useHotKeys({\n    c: e => {\n      fireHotKey(e, () => {\n        copy(outputs[mode][0]);\n      });\n    },\n    r: e => {\n      fireHotKey(e, () => {\n        generate();\n      });\n    }\n  });\n\n  useEffect(() => {\n    ReactGA.pageview('/');\n  }, []);\n\n  return (\n    <Styles isPwaMode={isPwaMode}>\n      <GlobalStyles />\n      <Header isPwaMode={isPwaMode} />\n      <ChoiceToggle\n        choices={{ Password: modes.PW, Passphrase: modes.PP }}\n        initial={mode === modes.PW ? 'Password' : 'Passphrase'}\n        onToggle={m => setMode(m)}\n      />\n      <Params\n        mode={mode}\n        values={params}\n        onChange={handleInputChange}\n        isPwaMode={isPwaMode}\n      />\n      <Meter entropy={entropy} />\n      <Secrets outputs={outputs[mode]} />\n      <ReGenButton onClick={() => generate()} />\n      {!isPwaMode && (\n        <>\n          <Instructions />\n          <Disclaimer />\n          <About />\n          <Footer />\n        </>\n      )}\n    </Styles>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}