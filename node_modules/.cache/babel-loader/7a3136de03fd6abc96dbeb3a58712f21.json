{"ast":null,"code":"var _jsxFileName = \"/Users/marcelo/Documents/passwordgen.live/password-generator/src/components/common/SecretTween.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { animated, useSpring } from 'react-spring';\nimport { generatePassword } from 'cryptoLogic';\n\nconst convertToCharCodeArray = string => {\n  return string.split('').map(ch => ch.charCodeAt(0));\n};\n\nconst normalizeCharCode = code => {\n  // return a letter or number when when spring bounces beyond char code range\n  // tried setting clamp -> true in the spring config, but it didn't seem to have the intended effect\n  // react-spring docs are less helpful than they could be\n  if (code === 64) return 66; // no @\n\n  if (code === 91 || code === 92 || code === 93) return 89; // no [\n\n  if (code === 94 || code === 95 || code === 96) return 98; // no `\n\n  if (code === 123) return 121; // no {\n\n  if (code === 47) return 49; // no /\n\n  if (code === 58) return 56; // no :\n\n  return code;\n};\n\nconst convertToString = (charCodeArray, alphaNumeric = false) => {\n  // return charCodeArray\n  //   .map(c => Math.floor(c))\n  //   .map(c => normalizeCharCode(c))\n  //   .map(c => String.fromCharCode(c))\n  //   .join('');\n  // reduce profiles 5-20x faster than the code above\n  return charCodeArray.reduce((result, code) => {\n    const normalized = alphaNumeric ? normalizeCharCode(Math.floor(code)) : Math.floor(code);\n    return result + String.fromCharCode(normalized);\n  }, '');\n}; // gets sketchy with long strings, > ~500 chars\n\n\nexport default function StringTween({\n  children,\n  duration = null,\n  scrambleOnClick = false,\n  alphaNumeric = false\n}) {\n  const from = convertToCharCodeArray(generatePassword(children.length));\n  const to = convertToCharCodeArray(children);\n  const precision = 1;\n  const friction = 50;\n  const config = {\n    // low precision since we're interpolating integers\n    // cuts number of operations by ~1/2\n    config: {\n      precision,\n      friction\n    },\n    from: {\n      chars: from\n    },\n    to: {\n      chars: to\n    }\n  };\n  if (duration) config.config = {\n    duration\n  };\n  const [spring, setSpring] = useSpring(() => config);\n\n  const scramble = () => {\n    if (scrambleOnClick) {\n      setSpring({\n        config: {\n          duration: 100,\n          precision\n        },\n        to: {\n          chars: convertToCharCodeArray(generatePassword(children.length))\n        },\n        onRest: () => {\n          setSpring({\n            config: {\n              duration: undefined,\n              precision,\n              friction\n            },\n            to: {\n              chars: convertToCharCodeArray(children)\n            }\n          });\n        }\n      });\n    }\n  };\n\n  return React.createElement(animated.span, {\n    onClick: scramble,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, spring.chars.interpolate((...charCodes) => convertToString(charCodes, alphaNumeric)));\n}\nStringTween.propTypes = {\n  children: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/Users/marcelo/Documents/passwordgen.live/password-generator/src/components/common/SecretTween.js"],"names":["React","PropTypes","animated","useSpring","generatePassword","convertToCharCodeArray","string","split","map","ch","charCodeAt","normalizeCharCode","code","convertToString","charCodeArray","alphaNumeric","reduce","result","normalized","Math","floor","String","fromCharCode","StringTween","children","duration","scrambleOnClick","from","length","to","precision","friction","config","chars","spring","setSpring","scramble","onRest","undefined","interpolate","charCodes","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { animated, useSpring } from 'react-spring';\nimport { generatePassword } from 'cryptoLogic';\n\nconst convertToCharCodeArray = string => {\n  return string.split('').map(ch => ch.charCodeAt(0));\n};\n\nconst normalizeCharCode = code => {\n  // return a letter or number when when spring bounces beyond char code range\n  // tried setting clamp -> true in the spring config, but it didn't seem to have the intended effect\n  // react-spring docs are less helpful than they could be\n  if (code === 64) return 66; // no @\n  if (code === 91 || code === 92 || code === 93) return 89; // no [\n  if (code === 94 || code === 95 || code === 96) return 98; // no `\n  if (code === 123) return 121; // no {\n  if (code === 47) return 49; // no /\n  if (code === 58) return 56; // no :\n  return code;\n};\n\nconst convertToString = (charCodeArray, alphaNumeric = false) => {\n  // return charCodeArray\n  //   .map(c => Math.floor(c))\n  //   .map(c => normalizeCharCode(c))\n  //   .map(c => String.fromCharCode(c))\n  //   .join('');\n\n  // reduce profiles 5-20x faster than the code above\n  return charCodeArray.reduce((result, code) => {\n    const normalized = alphaNumeric\n      ? normalizeCharCode(Math.floor(code))\n      : Math.floor(code);\n    return result + String.fromCharCode(normalized);\n  }, '');\n};\n\n// gets sketchy with long strings, > ~500 chars\nexport default function StringTween({\n  children,\n  duration = null,\n  scrambleOnClick = false,\n  alphaNumeric = false\n}) {\n  const from = convertToCharCodeArray(generatePassword(children.length));\n  const to = convertToCharCodeArray(children);\n  const precision = 1;\n  const friction = 50;\n  const config = {\n    // low precision since we're interpolating integers\n    // cuts number of operations by ~1/2\n    config: { precision, friction },\n    from: {\n      chars: from\n    },\n    to: {\n      chars: to\n    }\n  };\n  if (duration) config.config = { duration };\n  const [spring, setSpring] = useSpring(() => config);\n\n  const scramble = () => {\n    if (scrambleOnClick) {\n      setSpring({\n        config: { duration: 100, precision },\n        to: { chars: convertToCharCodeArray(generatePassword(children.length)) },\n        onRest: () => {\n          setSpring({\n            config: { duration: undefined, precision, friction },\n            to: { chars: convertToCharCodeArray(children) }\n          });\n        }\n      });\n    }\n  };\n\n  return (\n    <animated.span onClick={scramble}>\n      {spring.chars.interpolate((...charCodes) =>\n        convertToString(charCodes, alphaNumeric)\n      )}\n    </animated.span>\n  );\n}\n\nStringTween.propTypes = {\n  children: PropTypes.string.isRequired\n};\n"]},"metadata":{},"sourceType":"module"}