{"ast":null,"code":"import { useEffect, useRef } from 'react';\nexport default function useHotKeys(keyHandlerMap) {\n  // TODO verify map is string and functions\n  const targets = Object.keys(keyHandlerMap);\n  const keydown = useRef(false);\n  useEffect(() => {\n    const downHandler = e => {\n      const {\n        key\n      } = e; // check for long press\n\n      if (keydown.current) return;\n\n      if (targets.includes(key)) {\n        keydown.current = true;\n        const callback = keyHandlerMap[key];\n        callback(e);\n      }\n    };\n\n    const upHandler = ({\n      key\n    }) => {\n      if (targets.includes(key)) {\n        keydown.current = false;\n      }\n    };\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, [targets, keyHandlerMap]);\n}","map":{"version":3,"sources":["/Users/marcelo/Documents/passwordgen.live/password-generator/src/hooks/useHotKeys.js"],"names":["useEffect","useRef","useHotKeys","keyHandlerMap","targets","Object","keys","keydown","downHandler","e","key","current","includes","callback","upHandler","window","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAEA,eAAe,SAASC,UAAT,CAAoBC,aAApB,EAAmC;AAChD;AAEA,QAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYH,aAAZ,CAAhB;AACA,QAAMI,OAAO,GAAGN,MAAM,CAAC,KAAD,CAAtB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,WAAW,GAAGC,CAAC,IAAI;AACvB,YAAM;AAAEC,QAAAA;AAAF,UAAUD,CAAhB,CADuB,CAEvB;;AACA,UAAIF,OAAO,CAACI,OAAZ,EAAqB;;AAErB,UAAIP,OAAO,CAACQ,QAAR,CAAiBF,GAAjB,CAAJ,EAA2B;AACzBH,QAAAA,OAAO,CAACI,OAAR,GAAkB,IAAlB;AACA,cAAME,QAAQ,GAAGV,aAAa,CAACO,GAAD,CAA9B;AACAG,QAAAA,QAAQ,CAACJ,CAAD,CAAR;AACD;AACF,KAVD;;AAYA,UAAMK,SAAS,GAAG,CAAC;AAAEJ,MAAAA;AAAF,KAAD,KAAa;AAC7B,UAAIN,OAAO,CAACQ,QAAR,CAAiBF,GAAjB,CAAJ,EAA2B;AACzBH,QAAAA,OAAO,CAACI,OAAR,GAAkB,KAAlB;AACD;AACF,KAJD;;AAMAI,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCR,WAAnC;AACAO,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCF,SAAjC;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCT,WAAtC;AACAO,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCH,SAApC;AACD,KAHD;AAID,GAzBQ,EAyBN,CAACV,OAAD,EAAUD,aAAV,CAzBM,CAAT;AA0BD","sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport default function useHotKeys(keyHandlerMap) {\n  // TODO verify map is string and functions\n\n  const targets = Object.keys(keyHandlerMap);\n  const keydown = useRef(false);\n\n  useEffect(() => {\n    const downHandler = e => {\n      const { key } = e;\n      // check for long press\n      if (keydown.current) return;\n\n      if (targets.includes(key)) {\n        keydown.current = true;\n        const callback = keyHandlerMap[key];\n        callback(e);\n      }\n    };\n\n    const upHandler = ({ key }) => {\n      if (targets.includes(key)) {\n        keydown.current = false;\n      }\n    };\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, [targets, keyHandlerMap]);\n}\n"]},"metadata":{},"sourceType":"module"}