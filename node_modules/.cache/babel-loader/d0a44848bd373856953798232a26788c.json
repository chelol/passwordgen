{"ast":null,"code":"var _jsxFileName = \"/Users/marcelo/Documents/passwordgen.live/password-generator/src/components/common/RangeSlider.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport theme from 'styles/theme';\nconst {\n  inputHighlightColor\n} = theme;\nconst {\n  offBlack,\n  blue\n} = theme.colors;\nconst Styles = styled.div`\n  margin: 0;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  label {\n    display: inline-block;\n    user-select: none;\n  }\n  span {\n    font-size: 1.25em;\n    font-weight: bold;\n    width: 2.5em;\n    text-align: center;\n  }\n  input {\n    flex: 1;\n    appearance: none;\n    height: 0.5em;\n    padding: 0.5rem;\n    background: white;\n    outline: none;\n    transition: all 300ms;\n    border-radius: ${p => p.theme.borderRadius};\n    border: 0.1rem solid ${offBlack};\n    font-size: 1em;\n  }\n  input:hover {\n    border: 0.1rem solid ${blue};\n  }\n  /* Chrome, Opera, Safari, Edge */\n  input::-webkit-slider-thumb {\n    appearance: none;\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: ${p => p.theme.borderRadius};\n    border-radius: 50%;\n    background: ${inputHighlightColor};\n    cursor: pointer;\n    border: none;\n  }\n  /* Firefox */\n  input::-moz-range-thumb {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    background: ${inputHighlightColor};\n    cursor: pointer;\n    border: none;\n  }\n`;\nexport default function RangeSlider({\n  label,\n  name,\n  min = 1,\n  max = 100,\n  value,\n  onChange,\n  className,\n  ...props\n}) {\n  // update when user touches input outside of slider handle\n  const handleTouchStart = e => {\n    const {\n      clientX\n    } = e.targetTouches[0];\n    const touchX = clientX;\n    const rect = e.target.getBoundingClientRect();\n    const sliderWidth = rect.width;\n    const x = touchX - rect.x;\n    const selection = x / sliderWidth;\n    const range = max - min;\n    const newValue = Math.floor(range * selection + min);\n\n    if (newValue !== value) {\n      e.target.value = newValue;\n      onChange(e);\n    }\n  };\n\n  return React.createElement(Styles, {\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, label), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, value), React.createElement(\"input\", Object.assign({\n    type: \"range\",\n    name: name,\n    value: value,\n    min: min,\n    max: max,\n    onChange: onChange,\n    onTouchStart: handleTouchStart\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/marcelo/Documents/passwordgen.live/password-generator/src/components/common/RangeSlider.js"],"names":["React","styled","theme","inputHighlightColor","offBlack","blue","colors","Styles","div","p","borderRadius","RangeSlider","label","name","min","max","value","onChange","className","props","handleTouchStart","e","clientX","targetTouches","touchX","rect","target","getBoundingClientRect","sliderWidth","width","x","selection","range","newValue","Math","floor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAA0BD,KAAhC;AACA,MAAM;AAAEE,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAAqBH,KAAK,CAACI,MAAjC;AAEA,MAAMC,MAAM,GAAGN,MAAM,CAACO,GAAI;;;;;;;;;;;;;;;;;;;;;;;qBAuBLC,CAAC,IAAIA,CAAC,CAACP,KAAF,CAAQQ,YAAa;2BACpBN,QAAS;;;;2BAITC,IAAK;;;;;;;qBAOXI,CAAC,IAAIA,CAAC,CAACP,KAAF,CAAQQ,YAAa;;kBAE7BP,mBAAoB;;;;;;;;;kBASpBA,mBAAoB;;;;CA9CtC;AAoDA,eAAe,SAASQ,WAAT,CAAqB;AAClCC,EAAAA,KADkC;AAElCC,EAAAA,IAFkC;AAGlCC,EAAAA,GAAG,GAAG,CAH4B;AAIlCC,EAAAA,GAAG,GAAG,GAJ4B;AAKlCC,EAAAA,KALkC;AAMlCC,EAAAA,QANkC;AAOlCC,EAAAA,SAPkC;AAQlC,KAAGC;AAR+B,CAArB,EASZ;AACD;AACA,QAAMC,gBAAgB,GAAGC,CAAC,IAAI;AAC5B,UAAM;AAAEC,MAAAA;AAAF,QAAcD,CAAC,CAACE,aAAF,CAAgB,CAAhB,CAApB;AACA,UAAMC,MAAM,GAAGF,OAAf;AACA,UAAMG,IAAI,GAAGJ,CAAC,CAACK,MAAF,CAASC,qBAAT,EAAb;AACA,UAAMC,WAAW,GAAGH,IAAI,CAACI,KAAzB;AACA,UAAMC,CAAC,GAAGN,MAAM,GAAGC,IAAI,CAACK,CAAxB;AACA,UAAMC,SAAS,GAAGD,CAAC,GAAGF,WAAtB;AACA,UAAMI,KAAK,GAAGjB,GAAG,GAAGD,GAApB;AACA,UAAMmB,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,GAAGD,SAAR,GAAoBjB,GAA/B,CAAjB;;AACA,QAAImB,QAAQ,KAAKjB,KAAjB,EAAwB;AACtBK,MAAAA,CAAC,CAACK,MAAF,CAASV,KAAT,GAAiBiB,QAAjB;AACAhB,MAAAA,QAAQ,CAACI,CAAD,CAAR;AACD;AACF,GAbD;;AAeA,SACE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAEH,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQN,KAAR,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOI,KAAP,CAFF,EAGE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAEH,IAFR;AAGE,IAAA,KAAK,EAAEG,KAHT;AAIE,IAAA,GAAG,EAAEF,GAJP;AAKE,IAAA,GAAG,EAAEC,GALP;AAME,IAAA,QAAQ,EAAEE,QANZ;AAOE,IAAA,YAAY,EAAEG;AAPhB,KAQMD,KARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHF,CADF;AAgBD","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport theme from 'styles/theme';\n\nconst { inputHighlightColor } = theme;\nconst { offBlack, blue } = theme.colors;\n\nconst Styles = styled.div`\n  margin: 0;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  label {\n    display: inline-block;\n    user-select: none;\n  }\n  span {\n    font-size: 1.25em;\n    font-weight: bold;\n    width: 2.5em;\n    text-align: center;\n  }\n  input {\n    flex: 1;\n    appearance: none;\n    height: 0.5em;\n    padding: 0.5rem;\n    background: white;\n    outline: none;\n    transition: all 300ms;\n    border-radius: ${p => p.theme.borderRadius};\n    border: 0.1rem solid ${offBlack};\n    font-size: 1em;\n  }\n  input:hover {\n    border: 0.1rem solid ${blue};\n  }\n  /* Chrome, Opera, Safari, Edge */\n  input::-webkit-slider-thumb {\n    appearance: none;\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: ${p => p.theme.borderRadius};\n    border-radius: 50%;\n    background: ${inputHighlightColor};\n    cursor: pointer;\n    border: none;\n  }\n  /* Firefox */\n  input::-moz-range-thumb {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    background: ${inputHighlightColor};\n    cursor: pointer;\n    border: none;\n  }\n`;\n\nexport default function RangeSlider({\n  label,\n  name,\n  min = 1,\n  max = 100,\n  value,\n  onChange,\n  className,\n  ...props\n}) {\n  // update when user touches input outside of slider handle\n  const handleTouchStart = e => {\n    const { clientX } = e.targetTouches[0];\n    const touchX = clientX;\n    const rect = e.target.getBoundingClientRect();\n    const sliderWidth = rect.width;\n    const x = touchX - rect.x;\n    const selection = x / sliderWidth;\n    const range = max - min;\n    const newValue = Math.floor(range * selection + min);\n    if (newValue !== value) {\n      e.target.value = newValue;\n      onChange(e);\n    }\n  };\n\n  return (\n    <Styles className={className}>\n      <label>{label}</label>\n      <span>{value}</span>\n      <input\n        type=\"range\"\n        name={name}\n        value={value}\n        min={min}\n        max={max}\n        onChange={onChange}\n        onTouchStart={handleTouchStart}\n        {...props}\n      />\n    </Styles>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}