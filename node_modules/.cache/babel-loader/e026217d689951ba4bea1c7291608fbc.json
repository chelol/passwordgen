{"ast":null,"code":"import wordList from 'wordList';\nimport config from 'config';\nexport const getRandomSecure = () => window.crypto.getRandomValues(new Uint32Array(1))[0] / 2 ** 32;\nexport const getRandomElement = array => {\n  return array[Math.floor(getRandomSecure() * array.length)];\n};\nconst chars = {\n  upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split(''),\n  lower: 'abcdefghijklmnopqrstuvwxyz'.split(''),\n  numbers: '0123456789'.split(''),\n  symbols: '~!@#$%^&*_-+?.:;'.split('')\n};\nexport const generatePassword = (length, flags = {}) => {\n  flags = {\n    upper: true,\n    lower: true,\n    numbers: true,\n    symbols: true,\n    ...flags\n  };\n  let charPool = [];\n\n  for (const key in chars) {\n    if (flags[key]) charPool = [...charPool, ...chars[key]];\n  }\n\n  return Array(length).fill(null).map(() => getRandomElement(charPool)).join('');\n};\n\nconst interleaveWithNumbers = array => {\n  return array.reduce((acc, cur, i) => {\n    if (i !== array.length - 1) {\n      return [...acc, cur, getRandomElement(chars.numbers)];\n    } else {\n      return [...acc, cur];\n    }\n  }, []);\n};\n\nexport const generatePassphrase = (numWords, options = {}) => {\n  const delimiters = {\n    hyphen: '-',\n    period: '.',\n    space: ' ',\n    number: null\n  };\n  options = {\n    delimiter: delimiters.hyphen,\n    ...options\n  };\n\n  if (!(options.delimiter in delimiters)) {\n    options.delimiter = delimiters.hyphen;\n  }\n\n  const phrase = new Set();\n\n  while (phrase.size < numWords) phrase.add(getRandomElement(wordList));\n\n  if (options.delimiter === 'number') {\n    return interleaveWithNumbers([...phrase]).join('');\n  } else {\n    return [...phrase].join(delimiters[options.delimiter]);\n  }\n};\nexport const generatePasswords = (numPasswords = 3, options) => {\n  return Array(numPasswords).fill(null).map(() => generatePassword(options.length, options));\n};\nexport const generatePassphrases = (numPhrases = 3, options) => {\n  return Array(numPhrases).fill(null).map(() => generatePassphrase(options.length, options));\n};\nexport const getEntropy = (params, mode) => {\n  const {\n    modes\n  } = config;\n  const count = params[mode].length;\n\n  if (mode === modes.PP) {\n    const ppWordListCount = wordList.length;\n    const ppEntropyPerWord = Math.log2(ppWordListCount);\n    return params[mode].delimiter === 'number' ? ppEntropyPerWord * count + (count - 1) * 10 : ppEntropyPerWord * count;\n  } else {\n    const flags = Object.keys(chars);\n    const charSpace = flags.reduce((total, flag) => {\n      return params[mode][flag] ? total + chars[flag].length : total;\n    }, 0);\n    const pwEntropyPerChar = Math.log2(charSpace);\n    return pwEntropyPerChar * count;\n  }\n};","map":{"version":3,"sources":["/Users/marcelo/Documents/passwordgen.live/password-generator/src/cryptoLogic.js"],"names":["wordList","config","getRandomSecure","window","crypto","getRandomValues","Uint32Array","getRandomElement","array","Math","floor","length","chars","upper","split","lower","numbers","symbols","generatePassword","flags","charPool","key","Array","fill","map","join","interleaveWithNumbers","reduce","acc","cur","i","generatePassphrase","numWords","options","delimiters","hyphen","period","space","number","delimiter","phrase","Set","size","add","generatePasswords","numPasswords","generatePassphrases","numPhrases","getEntropy","params","mode","modes","count","PP","ppWordListCount","ppEntropyPerWord","log2","Object","keys","charSpace","total","flag","pwEntropyPerChar"],"mappings":"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","sourcesContent":["import wordList from 'wordList';\nimport config from 'config';\n\nexport const getRandomSecure = () =>\n  window.crypto.getRandomValues(new Uint32Array(1))[0] / 2 ** 32;\n\nexport const getRandomElement = array => {\n  return array[Math.floor(getRandomSecure() * array.length)];\n};\n\nconst chars = {\n  upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split(''),\n  lower: 'abcdefghijklmnopqrstuvwxyz'.split(''),\n  numbers: '0123456789'.split(''),\n  symbols: '~!@#$%^&*_-+?.:;'.split('')\n};\n\nexport const generatePassword = (length, flags = {}) => {\n  flags = { upper: true, lower: true, numbers: true, symbols: true, ...flags };\n\n  let charPool = [];\n  for (const key in chars) {\n    if (flags[key]) charPool = [...charPool, ...chars[key]];\n  }\n\n  return Array(length)\n    .fill(null)\n    .map(() => getRandomElement(charPool))\n    .join('');\n};\n\nconst interleaveWithNumbers = array => {\n  return array.reduce((acc, cur, i) => {\n    if (i !== array.length - 1) {\n      return [...acc, cur, getRandomElement(chars.numbers)];\n    } else {\n      return [...acc, cur];\n    }\n  }, []);\n};\n\nexport const generatePassphrase = (numWords, options = {}) => {\n  const delimiters = {\n    hyphen: '-',\n    period: '.',\n    space: ' ',\n    number: null\n  };\n  options = { delimiter: delimiters.hyphen, ...options };\n\n  if (!(options.delimiter in delimiters)) {\n    options.delimiter = delimiters.hyphen;\n  }\n\n  const phrase = new Set();\n  while (phrase.size < numWords) phrase.add(getRandomElement(wordList));\n  if (options.delimiter === 'number') {\n    return interleaveWithNumbers([...phrase]).join('');\n  } else {\n    return [...phrase].join(delimiters[options.delimiter]);\n  }\n};\n\nexport const generatePasswords = (numPasswords = 3, options) => {\n  return Array(numPasswords)\n    .fill(null)\n    .map(() => generatePassword(options.length, options));\n};\n\nexport const generatePassphrases = (numPhrases = 3, options) => {\n  return Array(numPhrases)\n    .fill(null)\n    .map(() => generatePassphrase(options.length, options));\n};\n\nexport const getEntropy = (params, mode) => {\n  const { modes } = config;\n  const count = params[mode].length;\n  if (mode === modes.PP) {\n    const ppWordListCount = wordList.length;\n    const ppEntropyPerWord = Math.log2(ppWordListCount);\n    return params[mode].delimiter === 'number'\n      ? ppEntropyPerWord * count + (count - 1) * 10\n      : ppEntropyPerWord * count;\n  } else {\n    const flags = Object.keys(chars);\n    const charSpace = flags.reduce((total, flag) => {\n      return params[mode][flag] ? total + chars[flag].length : total;\n    }, 0);\n    const pwEntropyPerChar = Math.log2(charSpace);\n    return pwEntropyPerChar * count;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}