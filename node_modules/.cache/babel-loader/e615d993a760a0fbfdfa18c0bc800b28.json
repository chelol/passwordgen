{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport default function useLocalStorageState(key, initialValue = null) {\n  const invalidKey = typeof key !== 'string' || key.length < 1;\n  if (invalidKey) throw TypeError('Storage key must be a non-empty string.');\n  const [state, setState] = useState(() => {\n    let value;\n\n    try {\n      value = JSON.parse(window.localStorage.getItem(key) || JSON.stringify(initialValue));\n    } catch (err) {\n      value = initialValue;\n    }\n\n    return value;\n  });\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [state, key]);\n  return [state, setState];\n}","map":{"version":3,"sources":["/Users/marcelo/Documents/passwordgen.live/password-generator/src/hooks/useLocalStorageState.js"],"names":["useState","useEffect","useLocalStorageState","key","initialValue","invalidKey","length","TypeError","state","setState","value","JSON","parse","window","localStorage","getItem","stringify","err","setItem"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,oBAAT,CAA8BC,GAA9B,EAAmCC,YAAY,GAAG,IAAlD,EAAwD;AACrE,QAAMC,UAAU,GAAG,OAAOF,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACG,MAAJ,GAAa,CAA3D;AAEA,MAAID,UAAJ,EAAgB,MAAME,SAAS,CAAC,yCAAD,CAAf;AAEhB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,MAAM;AACvC,QAAIU,KAAJ;;AACA,QAAI;AACFA,MAAAA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BZ,GAA5B,KAAoCQ,IAAI,CAACK,SAAL,CAAeZ,YAAf,CAA/C,CAAR;AACD,KAFD,CAEE,OAAOa,GAAP,EAAY;AACZP,MAAAA,KAAK,GAAGN,YAAR;AACD;;AACD,WAAOM,KAAP;AACD,GARiC,CAAlC;AAUAT,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4Bf,GAA5B,EAAiCQ,IAAI,CAACK,SAAL,CAAeR,KAAf,CAAjC;AACD,GAFQ,EAEN,CAACA,KAAD,EAAQL,GAAR,CAFM,CAAT;AAIA,SAAO,CAACK,KAAD,EAAQC,QAAR,CAAP;AACD","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function useLocalStorageState(key, initialValue = null) {\n  const invalidKey = typeof key !== 'string' || key.length < 1;\n\n  if (invalidKey) throw TypeError('Storage key must be a non-empty string.');\n\n  const [state, setState] = useState(() => {\n    let value;\n    try {\n      value = JSON.parse(window.localStorage.getItem(key) || JSON.stringify(initialValue));\n    } catch (err) {\n      value = initialValue;\n    }\n    return value;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [state, key]);\n\n  return [state, setState];\n}\n"]},"metadata":{},"sourceType":"module"}